buildscript {
    repositories {
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsGradlePluginVersion"
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.6.1'
        classpath "org.grails:grails-docs:${project.ext.properties.grailsDocsVersion ?: grailsVersion}"
    }
}

version project.projectVersion
group "org.grails.plugins"

apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: 'java-library'
apply plugin: 'groovy'
apply plugin: "org.grails.grails-plugin"
apply plugin: "org.grails.internal.grails-plugin-publish"

repositories {
    mavenCentral()
    maven { url "https://repo.grails.org/grails/core" }
}

configurations {
    documentation.extendsFrom compileClasspath
}

configurations {
    all {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            if (details.requested.group == 'org.seleniumhq.selenium') {
                details.useVersion(seleniumVersion)
            }
        }
    }
}

dependencies {
    api "org.springframework.boot:spring-boot-starter-logging"
    api "org.springframework.boot:spring-boot-autoconfigure"
    api "org.grails:grails-core"
    api "org.springframework.boot:spring-boot-starter-actuator"
    api "org.springframework.boot:spring-boot-starter-tomcat"
    api "org.grails:grails-web-boot"
    api "org.grails:grails-logging"
    api "org.grails:grails-plugin-rest"
    api "org.grails:grails-plugin-databinding"
    api "org.grails:grails-plugin-i18n"
    api "org.grails:grails-plugin-services"
    api "org.grails:grails-plugin-url-mappings"
    api "org.grails:grails-plugin-interceptors"
    api "org.grails.plugins:async"
    api "org.grails.plugins:scaffolding"
    api "org.codehaus.gpars:gpars:1.2.1"
    api "org.grails.plugins:gsp"
    api "com.googlecode.concurrentlinkedhashmap:concurrentlinkedhashmap-lru:1.4.2"

    runtimeOnly "org.grails.plugins:async"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web-plugin"
    compileOnly "org.grails:grails-plugin-services"
    compileOnly "org.grails:grails-plugin-domain-class"
    testImplementation "org.grails:grails-gorm-testing-support"
    testImplementation "org.grails:grails-web-testing-support"
    testImplementation "org.mockito:mockito-core"
    testImplementation("org.grails.plugins:geb") {
        exclude group: 'org.gebish', module: 'geb-spock'
    }

    testImplementation "org.gebish:geb-spock:$gebVersion"

    testImplementation "org.seleniumhq.selenium:selenium-chrome-driver:$seleniumVersion"
    testImplementation "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion"
    testImplementation "org.seleniumhq.selenium:selenium-safari-driver:$seleniumVersion"
    testImplementation "org.seleniumhq.selenium:selenium-remote-driver:$seleniumVersion"
    testImplementation "org.seleniumhq.selenium:selenium-api:$seleniumVersion"
    testImplementation "org.seleniumhq.selenium:selenium-support:$seleniumVersion"
    testImplementation "org.seleniumhq.selenium:selenium-java:$seleniumVersion"
    testImplementation "org.seleniumhq.selenium:selenium-chromium-driver:$seleniumVersion"
    testImplementation "org.seleniumhq.selenium:selenium-json:$seleniumVersion"
    testImplementation "org.seleniumhq.selenium:selenium-http:$seleniumVersion"
    testImplementation "org.seleniumhq.selenium:selenium-devtools-v85:$seleniumVersion"

    testImplementation "io.github.bonigarcia:webdrivermanager:$webDriverManagerVersion"
    testImplementation "org.apache.httpcomponents.client5:httpclient5:$httpclient5"

    documentation "com.github.javaparser:javaparser-core:3.15.14"


}
apply from: rootProject.file('gradle/testVerbose.gradle')

tasks.withType(Test) {
    systemProperty "geb.env", System.getProperty('geb.env', 'chromeHeadless')
    systemProperty "geb.build.reportsDir", reporting.file("geb/integrationTest")

    if (!System.getenv().containsKey('GITHUB_ACTIONS')) {
        systemProperty 'webdriver.chrome.driver', System.getProperty('webdriver.chrome.driver')
        systemProperty 'webdriver.gecko.driver', System.getProperty('webdriver.gecko.driver')
    } else {
        systemProperty 'webdriver.chrome.driver', "${System.getenv('CHROMEWEBDRIVER')}/chromedriver"
        systemProperty 'webdriver.gecko.driver', "${System.getenv('GECKOWEBDRIVER')}/geckodriver"
    }
}

task publishGuide(type: grails.doc.gradle.PublishGuide) {
    group = 'documentation'
    description = 'Generate Guide'

    targetDir = project.file("${buildDir}/docs")
    sourceRepo = "https://github.com/${githubSlug}/edit/${githubBranch}/src/main/docs"
    sourceDir = new File(projectDir, "src/main/docs")
    resourcesDir = new File(projectDir, "src/main/docs")
    propertiesFiles = [new File(rootProject.projectDir, "gradle.properties")]
    asciidoc = true
    properties = [
            'safe'     : 'UNSAFE',
            'version'  : project.version,
            'subtitle' : project.projectDesc,
            'api'      : '../api',
            'sourceDir': rootProject.projectDir.absolutePath,
            'sourcedir': rootProject.projectDir.absolutePath,
            'javaee'   : 'https://docs.oracle.com/javaee/7/api/',
            'javase'   : 'https://docs.oracle.com/javase/7/docs/api/',
            'groovyapi': 'https://docs.groovy-lang.org/latest/html/gapi/',
            'grailsapi': 'https://docs.grails.org/latest/api/',
            'gormapi'  : 'https://gorm.grails.org/latest/api/',
            'springapi': 'https://docs.spring.io/spring/docs/current/javadoc-api/'
    ]
    doLast {
        ant.move(file: "${project.buildDir}/docs/guide/single.html",
                tofile: "${project.buildDir}/docs/guide/index.html", overwrite: true)
        new File(project.buildDir, "docs/index.html").text = '''
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<meta http-equiv="refresh" content="0; url=guide/index.html" />
</head>

</body>
</html>
'''
    }
}

task docs(dependsOn: [groovydoc, publishGuide]) {
    group = 'documentation'
}

groovydoc.classpath += configurations.documentation

bootRun {
    jvmArgs(
            '-Dspring.output.ansi.enabled=always',
            '-noverify',
            '-XX:TieredStopAtLevel=1',
            '-Xmx1024m')
    sourceResources sourceSets.main
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

// enable if you wish to package this plugin as a standalone application
bootJar.enabled = false

grailsPublish {
    userOrg = 'grails'
    githubSlug = 'grails/grails-cache'
    license {
        name = 'Apache-2.0'
    }
    title = project.title
    desc = project.projectDesc
    developers = [jeffbrown: "Jeff Scott Brown", "puneetbehl": "Puneet Behl"]
}

integrationTest {
    testLogging {
        exceptionFormat = 'full'
    }
}

// exclude demo code from jar artifact
jar {
    includeEmptyDirs = false
    exclude 'com/demo/**'
}

tasks.named("build") {
    finalizedBy("docs")
}

