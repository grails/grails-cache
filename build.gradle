buildscript {
    repositories {
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsGradlePluginVersion"
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.6.1'
        classpath "com.github.erdi:webdriver-binaries-gradle-plugin:$webdriverBinariesVersion"
    }
}

group "org.grails.plugins"
version project.projectVersion

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin: "com.github.erdi.webdriver-binaries"
apply from:"https://raw.githubusercontent.com/grails/grails-common-build/v2.0.3/common-docs.gradle"
apply plugin:"org.grails.grails-plugin"
apply plugin:"org.grails.internal.grails-plugin-publish"

repositories {
    maven { url "https://repo.grails.org/grails/core" }
}

configurations {
    all {
        resolutionStrategy.eachDependency { DependencyResolveDetails details->
            if (details.requested.group == 'org.seleniumhq.selenium') {
                details.useVersion(seleniumVersion)
            }
        }
    }
}

dependencies {
    api "org.springframework.boot:spring-boot-starter-logging"
    api "org.springframework.boot:spring-boot-autoconfigure"
    api "org.grails:grails-core"
    api "org.springframework.boot:spring-boot-starter-actuator"
    api "org.springframework.boot:spring-boot-starter-tomcat"
    api "org.grails:grails-web-boot"
    api "org.grails:grails-logging"
    api "org.grails:grails-plugin-rest"
    api "org.grails:grails-plugin-databinding"
    api "org.grails:grails-plugin-i18n"
    api "org.grails:grails-plugin-services"
    api "org.grails:grails-plugin-url-mappings"
    api "org.grails:grails-plugin-interceptors"
    api "org.grails.plugins:async"
    api "org.grails.plugins:scaffolding"
    api "org.codehaus.gpars:gpars:1.2.1"
    api "org.grails.plugins:gsp"

    runtimeOnly "org.grails.plugins:async"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web-plugin"
    compileOnly "org.grails:grails-plugin-services"
    compileOnly "org.grails:grails-plugin-domain-class"
    testImplementation "org.grails:grails-gorm-testing-support"
    testImplementation "org.grails:grails-web-testing-support"
    testImplementation "org.mockito:mockito-core"
    testImplementation("org.grails.plugins:geb") {
        exclude group: 'org.gebish', module: 'geb-spock'
    }

    testImplementation "org.gebish:geb-spock:$gebVersion"

    testRuntimeOnly "org.seleniumhq.selenium:selenium-chrome-driver:$seleniumVersion"
    testRuntimeOnly "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion"
    testRuntimeOnly "org.seleniumhq.selenium:selenium-safari-driver:$seleniumSafariDriverVersion"

    testImplementation "org.seleniumhq.selenium:selenium-remote-driver:$seleniumVersion"
    testImplementation "org.seleniumhq.selenium:selenium-api:$seleniumVersion"
    testImplementation "org.seleniumhq.selenium:selenium-support:$seleniumVersion"

    api "com.googlecode.concurrentlinkedhashmap:concurrentlinkedhashmap-lru:1.4.2"
}

apply from: rootProject.file('gradle/testVerbose.gradle')

webdriverBinaries {
    if (!System.getenv().containsKey('CI')) {
        chromedriver "$chromeDriverVersion"
        geckodriver "$geckodriverVersion"
    }
}

tasks.withType(Test) {
    systemProperty "geb.env", System.getProperty('geb.env')
    systemProperty "geb.build.reportsDir", reporting.file("geb/integrationTest")
    if (!System.getenv().containsKey('CI')) {
        systemProperty 'webdriver.chrome.driver', System.getProperty('webdriver.chrome.driver')
        systemProperty 'webdriver.gecko.driver', System.getProperty('webdriver.gecko.driver')
    } else {
        systemProperty 'webdriver.chrome.driver', "${System.getenv('CHROMEWEBDRIVER')}/chromedriver"
        systemProperty 'webdriver.gecko.driver', "${System.getenv('GECKOWEBDRIVER')}/geckodriver"
    }
}

bootRun {
    jvmArgs(
        '-Dspring.output.ansi.enabled=always',
        '-noverify',
        '-XX:TieredStopAtLevel=1',
        '-Xmx1024m')
    sourceResources sourceSets.main
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

grailsPublish {
    userOrg = 'grails'
    githubSlug = 'grails/grails-cache'
    license {
        name = 'Apache-2.0'
    }
    title = project.title
    desc = project.projectDesc
    developers = [jeffbrown: "Jeff Scott Brown", "puneetbehl": "Puneet Behl"]
}

integrationTest {
    testLogging {
        exceptionFormat = 'full'
    }
}

// exclude demo code from jar artifact
jar {
    includeEmptyDirs = false
    exclude 'com/demo/**'
}
